{"level":"error","message":"[Failed getting item form database] | CastError: Cast to ObjectId failed for value \"{}\" (type Object) at path \"_id\" for model \"Product\""}
{"level":"error","message":"[Failed getting item form database] | CastError: Cast to ObjectId failed for value \"{ id: '123' }\" (type Object) at path \"_id\" for model \"Product\""}
{"level":"error","message":"[Failed getting item form database] | CastError: Cast to ObjectId failed for value \"{ id: '123' }\" (type Object) at path \"_id\" for model \"Product\""}
{"level":"error","message":"[Failed getting item form database] | CastError: Cast to ObjectId failed for value \"{ id: '123' }\" (type Object) at path \"_id\" for model \"Product\""}
{"level":"error","message":"[Failed inserting item to database] | ValidationError: name: Cast to string failed for value \"{ name: 'pera', description: 'es una fruta', stock: 20, price: 200 }\" (type Object) at path \"name\", description: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: true,\n    errored: null,\n    closed: true,\n    closeEmitted: true,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 1707,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'Host',\n    'localhost:8080',\n    'Connection',\n    'keep-alive',\n    'Content-Length',\n    '184',\n    'Accept',\n    'application/json',\n    'User-Agent',\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'Content-Type',\n    'application/json',\n    'Sec-GPC',\n    '1',\n    'Origin',\n    'http://localhost:8080',\n    'Sec-Fetch-Site',\n    'same-origin',\n    'Sec-Fetch-Mode',\n    'cors',\n    'Sec-Fetch-Dest',\n    'empty',\n    'Referer',\n    'http://localhost:8080/',\n    'Accept-Encoding',\n    'gzip, deflate, br',\n    'Accept-Language',\n    'es-ES,es;q=0.9'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/?',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 1707,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/graphql',\n  originalUrl: '/graphql?',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 1707,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(kSetNoDelay)]: false,\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(RequestTimeout)]: undefined\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    locals: [Object: null prototype] {},\n    writeHead: [Function: writeHead],\n    end: [Function: end],\n    flush: [Function: flush],\n    write: [Function: write],\n    on: [Function: on],\n    [Symbol(kCapture)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }\n  },\n  _parsedOriginalUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  sessionStore: MongoStore {\n    _events: [Object: null prototype] {\n      disconnect: [Function: ondisconnect],\n      connect: [Function: onconnect]\n    },\n    _eventsCount: 2,\n    _maxListeners: undefined,\n    crypto: null,\n    transformFunctions: {\n      serialize: [Function: stringify],\n      unserialize: [Function: parse]\n    },\n    clientP: Promise { [MongoClient] },\n    options: {\n      collectionName: 'sessions',\n      ttl: 1209600,\n      mongoOptions: [Object],\n      autoRemove: 'native',\n      autoRemoveInterval: 10,\n      touchAfter: 0,\n      stringify: true,\n      crypto: [Object],\n      mongoUrl: 'mongodb+srv://ernesto:erne@cluster0.mf9ug.mongodb.net/ecommerce?retryWrites=true&w=majority'\n    },\n    collectionP: Promise { [Collection] },\n    generate: [Function (anonymous)],\n    [Symbol(kCapture)]: false\n  },\n  sessionID: 'hHpij0ds5sKGABYMe_gqkanXEXrnls0s',\n  session: Session {\n    cookie: {\n      path: '/',\n      _expires: 2021-12-08T21:38:09.624Z,\n      originalMaxAge: 60000,\n      httpOnly: true\n    }\n  },\n  secret: undefined,\n  cookies: [Object: null prototype] {},\n  signedCookies: [Object: null prototype] {},\n  logIn: [Function (anonymous)],\n  login: [Function (anonymous)],\n  logOut: [Function (anonymous)],\n  logout: [Function (anonymous)],\n  isAuthenticated: [Function (anonymous)],\n  isUnauthenticated: [Function (anonymous)],\n  _passport: {\n    instance: Authenticator {\n      _key: 'passport',\n      _strategies: [Object],\n      _serializers: [Array],\n      _deserializers: [Array],\n      _infoTransformers: [],\n      _framework: [Object],\n      _sm: [SessionManager],\n      Authenticator: [Function: Authenticator],\n      Passport: [Function: Authenticator],\n      Strategy: [Function],\n      strategies: [Object]\n    }\n  },\n  body: {\n    query: 'mutation {\\n' +\n      '  saveProduct(name:\"pera\", description:\"es una fruta\", stock: 20, price: 200) {\\n' +\n      '    name,\\n' +\n      '    description,\\n' +\n      '    stock,\\n' +\n      '    price\\n' +\n      '  }\\n' +\n      '}',\n    variables: null\n  },\n  _body: true,\n  length: undefined,\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    host: 'localhost:8080',\n    connection: 'keep-alive',\n    'content-length': '184',\n    accept: 'application/json',\n    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'content-type': 'application/json',\n    'sec-gpc': '1',\n    origin: 'http://localhost:8080',\n    'sec-fetch-site': 'same-origin',\n    'sec-fetch-mode': 'cors',\n    'sec-fetch-dest': 'empty',\n    referer: 'http://localhost:8080/',\n    'accept-encoding': 'gzip, deflate, br',\n    'accept-language': 'es-ES,es;q=0.9'\n  },\n  [Symbol(kHeadersCount)]: 28,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}\" (type IncomingMessage) at path \"description\", stock: Cast to Number failed for value \"{\n  fieldName: 'saveProduct',\n  fieldNodes: [\n    {\n      kind: 'Field',\n      alias: undefined,\n      name: [Object],\n      arguments: [Array],\n      directives: [],\n      selectionSet: [Object],\n      loc: [Location]\n    }\n  ],\n  returnType: GraphQLObjectType {\n    name: 'Product',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      name: [Object],\n      description: [Object],\n      stock: [Object],\n      price: [Object]\n    },\n    _interfaces: []\n  },\n  parentType: GraphQLObjectType {\n    name: 'Mutation',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      updateProduct: [Object],\n      deleteProduct: [Object],\n      saveProduct: [Object]\n    },\n    _interfaces: []\n  },\n  path: { prev: undefined, key: 'saveProduct', typename: 'Mutation' },\n  schema: GraphQLSchema {\n    __validationErrors: [],\n    description: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: undefined,\n    extensionASTNodes: [],\n    _queryType: GraphQLObjectType {\n      name: 'Query',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _mutationType: GraphQLObjectType {\n      name: 'Mutation',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _subscriptionType: undefined,\n    _directives: [\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective]\n    ],\n    _typeMap: [Object: null prototype] {\n      Query: [GraphQLObjectType],\n      String: [GraphQLScalarType],\n      Mutation: [GraphQLObjectType],\n      Int: [GraphQLScalarType],\n      Product: [GraphQLObjectType],\n      Boolean: [GraphQLScalarType],\n      __Schema: [GraphQLObjectType],\n      __Type: [GraphQLObjectType],\n      __TypeKind: [GraphQLEnumType],\n      __Field: [GraphQLObjectType],\n      __InputValue: [GraphQLObjectType],\n      __EnumValue: [GraphQLObjectType],\n      __Directive: [GraphQLObjectType],\n      __DirectiveLocation: [GraphQLEnumType]\n    },\n    _subTypeMap: [Object: null prototype] {},\n    _implementationsMap: [Object: null prototype] {}\n  },\n  fragments: [Object: null prototype] {},\n  rootValue: {\n    product: [Function: getProduct],\n    products: [Function: getProducts],\n    updateProduct: [Function: updateProduct],\n    deleteProduct: [Function: deleteProduct],\n    saveProduct: [Function: saveProduct]\n  },\n  operation: {\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: undefined,\n    variableDefinitions: [],\n    directives: [],\n    selectionSet: { kind: 'SelectionSet', selections: [Array], loc: [Location] },\n    loc: Location {\n      start: 0,\n      end: 144,\n      startToken: [Token],\n      endToken: [Token],\n      source: [Source]\n    }\n  },\n  variableValues: {}\n}\" (type Object) at path \"stock\", price: Path `price` is required."}
{"level":"error","message":"[Failed inserting item to database] | ValidationError: name: Cast to string failed for value \"{ name: 'pera', description: 'es una fruta', stock: 20, price: 200 }\" (type Object) at path \"name\", description: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: true,\n    errored: null,\n    closed: true,\n    closeEmitted: true,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 297,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'Host',\n    'localhost:8080',\n    'Connection',\n    'keep-alive',\n    'Content-Length',\n    '184',\n    'Accept',\n    'application/json',\n    'User-Agent',\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'Content-Type',\n    'application/json',\n    'Sec-GPC',\n    '1',\n    'Origin',\n    'http://localhost:8080',\n    'Sec-Fetch-Site',\n    'same-origin',\n    'Sec-Fetch-Mode',\n    'cors',\n    'Sec-Fetch-Dest',\n    'empty',\n    'Referer',\n    'http://localhost:8080/',\n    'Accept-Encoding',\n    'gzip, deflate, br',\n    'Accept-Language',\n    'es-ES,es;q=0.9'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/?',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 297,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/graphql',\n  originalUrl: '/graphql?',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 297,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(kSetNoDelay)]: false,\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(RequestTimeout)]: undefined\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    locals: [Object: null prototype] {},\n    writeHead: [Function: writeHead],\n    end: [Function: end],\n    flush: [Function: flush],\n    write: [Function: write],\n    on: [Function: on],\n    [Symbol(kCapture)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }\n  },\n  _parsedOriginalUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  sessionStore: MongoStore {\n    _events: [Object: null prototype] {\n      disconnect: [Function: ondisconnect],\n      connect: [Function: onconnect]\n    },\n    _eventsCount: 2,\n    _maxListeners: undefined,\n    crypto: null,\n    transformFunctions: {\n      serialize: [Function: stringify],\n      unserialize: [Function: parse]\n    },\n    clientP: Promise { [MongoClient] },\n    options: {\n      collectionName: 'sessions',\n      ttl: 1209600,\n      mongoOptions: [Object],\n      autoRemove: 'native',\n      autoRemoveInterval: 10,\n      touchAfter: 0,\n      stringify: true,\n      crypto: [Object],\n      mongoUrl: 'mongodb+srv://ernesto:erne@cluster0.mf9ug.mongodb.net/ecommerce?retryWrites=true&w=majority'\n    },\n    collectionP: Promise { [Collection] },\n    generate: [Function (anonymous)],\n    [Symbol(kCapture)]: false\n  },\n  sessionID: 'ulzDT1BYMUwd_gLLUj1H-Ke2SXpYSHZx',\n  session: Session {\n    cookie: {\n      path: '/',\n      _expires: 2021-12-08T21:39:08.855Z,\n      originalMaxAge: 60000,\n      httpOnly: true\n    }\n  },\n  secret: undefined,\n  cookies: [Object: null prototype] {},\n  signedCookies: [Object: null prototype] {},\n  logIn: [Function (anonymous)],\n  login: [Function (anonymous)],\n  logOut: [Function (anonymous)],\n  logout: [Function (anonymous)],\n  isAuthenticated: [Function (anonymous)],\n  isUnauthenticated: [Function (anonymous)],\n  _passport: {\n    instance: Authenticator {\n      _key: 'passport',\n      _strategies: [Object],\n      _serializers: [Array],\n      _deserializers: [Array],\n      _infoTransformers: [],\n      _framework: [Object],\n      _sm: [SessionManager],\n      Authenticator: [Function: Authenticator],\n      Passport: [Function: Authenticator],\n      Strategy: [Function],\n      strategies: [Object]\n    }\n  },\n  body: {\n    query: 'mutation {\\n' +\n      '  saveProduct(name:\"pera\", description:\"es una fruta\", stock: 20, price: 200) {\\n' +\n      '    name,\\n' +\n      '    description,\\n' +\n      '    stock,\\n' +\n      '    price\\n' +\n      '  }\\n' +\n      '}',\n    variables: null\n  },\n  _body: true,\n  length: undefined,\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    host: 'localhost:8080',\n    connection: 'keep-alive',\n    'content-length': '184',\n    accept: 'application/json',\n    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'content-type': 'application/json',\n    'sec-gpc': '1',\n    origin: 'http://localhost:8080',\n    'sec-fetch-site': 'same-origin',\n    'sec-fetch-mode': 'cors',\n    'sec-fetch-dest': 'empty',\n    referer: 'http://localhost:8080/',\n    'accept-encoding': 'gzip, deflate, br',\n    'accept-language': 'es-ES,es;q=0.9'\n  },\n  [Symbol(kHeadersCount)]: 28,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}\" (type IncomingMessage) at path \"description\", stock: Cast to Number failed for value \"{\n  fieldName: 'saveProduct',\n  fieldNodes: [\n    {\n      kind: 'Field',\n      alias: undefined,\n      name: [Object],\n      arguments: [Array],\n      directives: [],\n      selectionSet: [Object],\n      loc: [Location]\n    }\n  ],\n  returnType: GraphQLObjectType {\n    name: 'Product',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      name: [Object],\n      description: [Object],\n      stock: [Object],\n      price: [Object]\n    },\n    _interfaces: []\n  },\n  parentType: GraphQLObjectType {\n    name: 'Mutation',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      updateProduct: [Object],\n      deleteProduct: [Object],\n      saveProduct: [Object]\n    },\n    _interfaces: []\n  },\n  path: { prev: undefined, key: 'saveProduct', typename: 'Mutation' },\n  schema: GraphQLSchema {\n    __validationErrors: [],\n    description: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: undefined,\n    extensionASTNodes: [],\n    _queryType: GraphQLObjectType {\n      name: 'Query',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _mutationType: GraphQLObjectType {\n      name: 'Mutation',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _subscriptionType: undefined,\n    _directives: [\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective]\n    ],\n    _typeMap: [Object: null prototype] {\n      Query: [GraphQLObjectType],\n      String: [GraphQLScalarType],\n      Mutation: [GraphQLObjectType],\n      Int: [GraphQLScalarType],\n      Product: [GraphQLObjectType],\n      Boolean: [GraphQLScalarType],\n      __Schema: [GraphQLObjectType],\n      __Type: [GraphQLObjectType],\n      __TypeKind: [GraphQLEnumType],\n      __Field: [GraphQLObjectType],\n      __InputValue: [GraphQLObjectType],\n      __EnumValue: [GraphQLObjectType],\n      __Directive: [GraphQLObjectType],\n      __DirectiveLocation: [GraphQLEnumType]\n    },\n    _subTypeMap: [Object: null prototype] {},\n    _implementationsMap: [Object: null prototype] {}\n  },\n  fragments: [Object: null prototype] {},\n  rootValue: {\n    product: [Function: getProduct],\n    products: [Function: getProducts],\n    updateProduct: [Function: updateProduct],\n    deleteProduct: [Function: deleteProduct],\n    saveProduct: [Function: saveProduct]\n  },\n  operation: {\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: undefined,\n    variableDefinitions: [],\n    directives: [],\n    selectionSet: { kind: 'SelectionSet', selections: [Array], loc: [Location] },\n    loc: Location {\n      start: 0,\n      end: 144,\n      startToken: [Token],\n      endToken: [Token],\n      source: [Source]\n    }\n  },\n  variableValues: {}\n}\" (type Object) at path \"stock\", price: Path `price` is required."}
{"level":"error","message":"[Failed inserting item to database] | ValidationError: name: Cast to string failed for value \"{ name: 'pera', description: 'es una fruta', stock: 20, price: 200 }\" (type Object) at path \"name\", description: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: true,\n    errored: null,\n    closed: true,\n    closeEmitted: true,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 300,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'Host',\n    'localhost:8080',\n    'Connection',\n    'keep-alive',\n    'Content-Length',\n    '184',\n    'Accept',\n    'application/json',\n    'User-Agent',\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'Content-Type',\n    'application/json',\n    'Sec-GPC',\n    '1',\n    'Origin',\n    'http://localhost:8080',\n    'Sec-Fetch-Site',\n    'same-origin',\n    'Sec-Fetch-Mode',\n    'cors',\n    'Sec-Fetch-Dest',\n    'empty',\n    'Referer',\n    'http://localhost:8080/',\n    'Accept-Encoding',\n    'gzip, deflate, br',\n    'Accept-Language',\n    'es-ES,es;q=0.9'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/?',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 300,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/graphql',\n  originalUrl: '/graphql?',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 300,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(kSetNoDelay)]: false,\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(RequestTimeout)]: undefined\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    locals: [Object: null prototype] {},\n    writeHead: [Function: writeHead],\n    end: [Function: end],\n    flush: [Function: flush],\n    write: [Function: write],\n    on: [Function: on],\n    [Symbol(kCapture)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }\n  },\n  _parsedOriginalUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  sessionStore: MongoStore {\n    _events: [Object: null prototype] {\n      disconnect: [Function: ondisconnect],\n      connect: [Function: onconnect]\n    },\n    _eventsCount: 2,\n    _maxListeners: undefined,\n    crypto: null,\n    transformFunctions: {\n      serialize: [Function: stringify],\n      unserialize: [Function: parse]\n    },\n    clientP: Promise { [MongoClient] },\n    options: {\n      collectionName: 'sessions',\n      ttl: 1209600,\n      mongoOptions: [Object],\n      autoRemove: 'native',\n      autoRemoveInterval: 10,\n      touchAfter: 0,\n      stringify: true,\n      crypto: [Object],\n      mongoUrl: 'mongodb+srv://ernesto:erne@cluster0.mf9ug.mongodb.net/ecommerce?retryWrites=true&w=majority'\n    },\n    collectionP: Promise { [Collection] },\n    generate: [Function (anonymous)],\n    [Symbol(kCapture)]: false\n  },\n  sessionID: 'yQ8vvRr3LNS-ki6SeiKMubnvIMO1zdzJ',\n  session: Session {\n    cookie: {\n      path: '/',\n      _expires: 2021-12-08T21:40:17.693Z,\n      originalMaxAge: 60000,\n      httpOnly: true\n    }\n  },\n  secret: undefined,\n  cookies: [Object: null prototype] {},\n  signedCookies: [Object: null prototype] {},\n  logIn: [Function (anonymous)],\n  login: [Function (anonymous)],\n  logOut: [Function (anonymous)],\n  logout: [Function (anonymous)],\n  isAuthenticated: [Function (anonymous)],\n  isUnauthenticated: [Function (anonymous)],\n  _passport: {\n    instance: Authenticator {\n      _key: 'passport',\n      _strategies: [Object],\n      _serializers: [Array],\n      _deserializers: [Array],\n      _infoTransformers: [],\n      _framework: [Object],\n      _sm: [SessionManager],\n      Authenticator: [Function: Authenticator],\n      Passport: [Function: Authenticator],\n      Strategy: [Function],\n      strategies: [Object]\n    }\n  },\n  body: {\n    query: 'mutation {\\n' +\n      '  saveProduct(name:\"pera\", description:\"es una fruta\", stock: 20, price: 200) {\\n' +\n      '    name,\\n' +\n      '    description,\\n' +\n      '    stock,\\n' +\n      '    price\\n' +\n      '  }\\n' +\n      '}',\n    variables: null\n  },\n  _body: true,\n  length: undefined,\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    host: 'localhost:8080',\n    connection: 'keep-alive',\n    'content-length': '184',\n    accept: 'application/json',\n    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'content-type': 'application/json',\n    'sec-gpc': '1',\n    origin: 'http://localhost:8080',\n    'sec-fetch-site': 'same-origin',\n    'sec-fetch-mode': 'cors',\n    'sec-fetch-dest': 'empty',\n    referer: 'http://localhost:8080/',\n    'accept-encoding': 'gzip, deflate, br',\n    'accept-language': 'es-ES,es;q=0.9'\n  },\n  [Symbol(kHeadersCount)]: 28,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}\" (type IncomingMessage) at path \"description\", stock: Cast to Number failed for value \"{\n  fieldName: 'saveProduct',\n  fieldNodes: [\n    {\n      kind: 'Field',\n      alias: undefined,\n      name: [Object],\n      arguments: [Array],\n      directives: [],\n      selectionSet: [Object],\n      loc: [Location]\n    }\n  ],\n  returnType: GraphQLObjectType {\n    name: 'Product',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      name: [Object],\n      description: [Object],\n      stock: [Object],\n      price: [Object]\n    },\n    _interfaces: []\n  },\n  parentType: GraphQLObjectType {\n    name: 'Mutation',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      updateProduct: [Object],\n      deleteProduct: [Object],\n      saveProduct: [Object]\n    },\n    _interfaces: []\n  },\n  path: { prev: undefined, key: 'saveProduct', typename: 'Mutation' },\n  schema: GraphQLSchema {\n    __validationErrors: [],\n    description: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: undefined,\n    extensionASTNodes: [],\n    _queryType: GraphQLObjectType {\n      name: 'Query',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _mutationType: GraphQLObjectType {\n      name: 'Mutation',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _subscriptionType: undefined,\n    _directives: [\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective]\n    ],\n    _typeMap: [Object: null prototype] {\n      Query: [GraphQLObjectType],\n      String: [GraphQLScalarType],\n      Mutation: [GraphQLObjectType],\n      Int: [GraphQLScalarType],\n      Product: [GraphQLObjectType],\n      Boolean: [GraphQLScalarType],\n      __Schema: [GraphQLObjectType],\n      __Type: [GraphQLObjectType],\n      __TypeKind: [GraphQLEnumType],\n      __Field: [GraphQLObjectType],\n      __InputValue: [GraphQLObjectType],\n      __EnumValue: [GraphQLObjectType],\n      __Directive: [GraphQLObjectType],\n      __DirectiveLocation: [GraphQLEnumType]\n    },\n    _subTypeMap: [Object: null prototype] {},\n    _implementationsMap: [Object: null prototype] {}\n  },\n  fragments: [Object: null prototype] {},\n  rootValue: {\n    product: [Function: getProduct],\n    products: [Function: getProducts],\n    updateProduct: [Function: updateProduct],\n    deleteProduct: [Function: deleteProduct],\n    saveProduct: [Function: saveProduct]\n  },\n  operation: {\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: undefined,\n    variableDefinitions: [],\n    directives: [],\n    selectionSet: { kind: 'SelectionSet', selections: [Array], loc: [Location] },\n    loc: Location {\n      start: 0,\n      end: 144,\n      startToken: [Token],\n      endToken: [Token],\n      source: [Source]\n    }\n  },\n  variableValues: {}\n}\" (type Object) at path \"stock\", price: Path `price` is required."}
{"level":"error","message":"[Failed inserting item to database] | ValidationError: name: Cast to string failed for value \"{ name: 'pera', description: 'es una fruta', stock: 20, price: 200 }\" (type Object) at path \"name\", description: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: true,\n    errored: null,\n    closed: true,\n    closeEmitted: true,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 294,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'Host',\n    'localhost:8080',\n    'Connection',\n    'keep-alive',\n    'Content-Length',\n    '184',\n    'Accept',\n    'application/json',\n    'User-Agent',\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'Content-Type',\n    'application/json',\n    'Sec-GPC',\n    '1',\n    'Origin',\n    'http://localhost:8080',\n    'Sec-Fetch-Site',\n    'same-origin',\n    'Sec-Fetch-Mode',\n    'cors',\n    'Sec-Fetch-Dest',\n    'empty',\n    'Referer',\n    'http://localhost:8080/',\n    'Accept-Encoding',\n    'gzip, deflate, br',\n    'Accept-Language',\n    'es-ES,es;q=0.9'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/?',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 294,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/graphql',\n  originalUrl: '/graphql?',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 294,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(kSetNoDelay)]: false,\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(RequestTimeout)]: undefined\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    locals: [Object: null prototype] {},\n    writeHead: [Function: writeHead],\n    end: [Function: end],\n    flush: [Function: flush],\n    write: [Function: write],\n    on: [Function: on],\n    [Symbol(kCapture)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }\n  },\n  _parsedOriginalUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  sessionStore: MongoStore {\n    _events: [Object: null prototype] {\n      disconnect: [Function: ondisconnect],\n      connect: [Function: onconnect]\n    },\n    _eventsCount: 2,\n    _maxListeners: undefined,\n    crypto: null,\n    transformFunctions: {\n      serialize: [Function: stringify],\n      unserialize: [Function: parse]\n    },\n    clientP: Promise { [MongoClient] },\n    options: {\n      collectionName: 'sessions',\n      ttl: 1209600,\n      mongoOptions: [Object],\n      autoRemove: 'native',\n      autoRemoveInterval: 10,\n      touchAfter: 0,\n      stringify: true,\n      crypto: [Object],\n      mongoUrl: 'mongodb+srv://ernesto:erne@cluster0.mf9ug.mongodb.net/ecommerce?retryWrites=true&w=majority'\n    },\n    collectionP: Promise { [Collection] },\n    generate: [Function (anonymous)],\n    [Symbol(kCapture)]: false\n  },\n  sessionID: 'QJTq52HBTfA4Tqpck1JXzDcGbhgmUbN9',\n  session: Session {\n    cookie: {\n      path: '/',\n      _expires: 2021-12-08T21:41:52.544Z,\n      originalMaxAge: 60000,\n      httpOnly: true\n    }\n  },\n  secret: undefined,\n  cookies: [Object: null prototype] {},\n  signedCookies: [Object: null prototype] {},\n  logIn: [Function (anonymous)],\n  login: [Function (anonymous)],\n  logOut: [Function (anonymous)],\n  logout: [Function (anonymous)],\n  isAuthenticated: [Function (anonymous)],\n  isUnauthenticated: [Function (anonymous)],\n  _passport: {\n    instance: Authenticator {\n      _key: 'passport',\n      _strategies: [Object],\n      _serializers: [Array],\n      _deserializers: [Array],\n      _infoTransformers: [],\n      _framework: [Object],\n      _sm: [SessionManager],\n      Authenticator: [Function: Authenticator],\n      Passport: [Function: Authenticator],\n      Strategy: [Function],\n      strategies: [Object]\n    }\n  },\n  body: {\n    query: 'mutation {\\n' +\n      '  saveProduct(name:\"pera\", description:\"es una fruta\", stock: 20, price: 200) {\\n' +\n      '    name,\\n' +\n      '    description,\\n' +\n      '    stock,\\n' +\n      '    price\\n' +\n      '  }\\n' +\n      '}',\n    variables: null\n  },\n  _body: true,\n  length: undefined,\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    host: 'localhost:8080',\n    connection: 'keep-alive',\n    'content-length': '184',\n    accept: 'application/json',\n    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'content-type': 'application/json',\n    'sec-gpc': '1',\n    origin: 'http://localhost:8080',\n    'sec-fetch-site': 'same-origin',\n    'sec-fetch-mode': 'cors',\n    'sec-fetch-dest': 'empty',\n    referer: 'http://localhost:8080/',\n    'accept-encoding': 'gzip, deflate, br',\n    'accept-language': 'es-ES,es;q=0.9'\n  },\n  [Symbol(kHeadersCount)]: 28,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}\" (type IncomingMessage) at path \"description\", stock: Cast to Number failed for value \"{\n  fieldName: 'saveProduct',\n  fieldNodes: [\n    {\n      kind: 'Field',\n      alias: undefined,\n      name: [Object],\n      arguments: [Array],\n      directives: [],\n      selectionSet: [Object],\n      loc: [Location]\n    }\n  ],\n  returnType: GraphQLObjectType {\n    name: 'Product',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      name: [Object],\n      description: [Object],\n      stock: [Object],\n      price: [Object]\n    },\n    _interfaces: []\n  },\n  parentType: GraphQLObjectType {\n    name: 'Mutation',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      updateProduct: [Object],\n      deleteProduct: [Object],\n      saveProduct: [Object]\n    },\n    _interfaces: []\n  },\n  path: { prev: undefined, key: 'saveProduct', typename: 'Mutation' },\n  schema: GraphQLSchema {\n    __validationErrors: [],\n    description: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: undefined,\n    extensionASTNodes: [],\n    _queryType: GraphQLObjectType {\n      name: 'Query',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _mutationType: GraphQLObjectType {\n      name: 'Mutation',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _subscriptionType: undefined,\n    _directives: [\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective]\n    ],\n    _typeMap: [Object: null prototype] {\n      Query: [GraphQLObjectType],\n      String: [GraphQLScalarType],\n      Mutation: [GraphQLObjectType],\n      Int: [GraphQLScalarType],\n      Product: [GraphQLObjectType],\n      Boolean: [GraphQLScalarType],\n      __Schema: [GraphQLObjectType],\n      __Type: [GraphQLObjectType],\n      __TypeKind: [GraphQLEnumType],\n      __Field: [GraphQLObjectType],\n      __InputValue: [GraphQLObjectType],\n      __EnumValue: [GraphQLObjectType],\n      __Directive: [GraphQLObjectType],\n      __DirectiveLocation: [GraphQLEnumType]\n    },\n    _subTypeMap: [Object: null prototype] {},\n    _implementationsMap: [Object: null prototype] {}\n  },\n  fragments: [Object: null prototype] {},\n  rootValue: {\n    product: [Function: getProduct],\n    products: [Function: getProducts],\n    updateProduct: [Function: updateProduct],\n    deleteProduct: [Function: deleteProduct],\n    saveProduct: [Function: saveProduct]\n  },\n  operation: {\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: undefined,\n    variableDefinitions: [],\n    directives: [],\n    selectionSet: { kind: 'SelectionSet', selections: [Array], loc: [Location] },\n    loc: Location {\n      start: 0,\n      end: 144,\n      startToken: [Token],\n      endToken: [Token],\n      source: [Source]\n    }\n  },\n  variableValues: {}\n}\" (type Object) at path \"stock\", price: Path `price` is required."}
{"level":"error","message":"[Failed inserting item to database] | ValidationError: name: Cast to string failed for value \"{ name: 'pera', description: 'es una fruta', stock: 20, price: 200 }\" (type Object) at path \"name\", description: Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: true,\n    ended: true,\n    endEmitted: true,\n    reading: false,\n    constructed: true,\n    sync: false,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: true,\n    errored: null,\n    closed: true,\n    closeEmitted: true,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: false,\n    dataEmitted: true,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: false\n  },\n  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 303,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'Host',\n    'localhost:8080',\n    'Connection',\n    'keep-alive',\n    'Content-Length',\n    '184',\n    'Accept',\n    'application/json',\n    'User-Agent',\n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'Content-Type',\n    'application/json',\n    'Sec-GPC',\n    '1',\n    'Origin',\n    'http://localhost:8080',\n    'Sec-Fetch-Site',\n    'same-origin',\n    'Sec-Fetch-Mode',\n    'cors',\n    'Sec-Fetch-Dest',\n    'empty',\n    'Referer',\n    'http://localhost:8080/',\n    'Accept-Encoding',\n    'gzip, deflate, br',\n    'Accept-Language',\n    'es-ES,es;q=0.9'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/?',\n  method: 'POST',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Function: socketOnError],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::8080',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 15\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 1,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      writeHead: [Function: writeHead],\n      end: [Function: end],\n      flush: [Function: flush],\n      write: [Function: write],\n      on: [Function: on],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    [Symbol(async_id_symbol)]: 303,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  _consuming: true,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/graphql',\n  originalUrl: '/graphql?',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  params: {},\n  query: {},\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },\n    _eventsCount: 1,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      [Symbol(async_id_symbol)]: 303,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(kSetNoDelay)]: false,\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(RequestTimeout)]: undefined\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    locals: [Object: null prototype] {},\n    writeHead: [Function: writeHead],\n    end: [Function: end],\n    flush: [Function: flush],\n    write: [Function: write],\n    on: [Function: on],\n    [Symbol(kCapture)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }\n  },\n  _parsedOriginalUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?',\n    query: '',\n    pathname: '/graphql',\n    path: '/graphql?',\n    href: '/graphql?',\n    _raw: '/graphql?'\n  },\n  sessionStore: MongoStore {\n    _events: [Object: null prototype] {\n      disconnect: [Function: ondisconnect],\n      connect: [Function: onconnect]\n    },\n    _eventsCount: 2,\n    _maxListeners: undefined,\n    crypto: null,\n    transformFunctions: {\n      serialize: [Function: stringify],\n      unserialize: [Function: parse]\n    },\n    clientP: Promise { [MongoClient] },\n    options: {\n      collectionName: 'sessions',\n      ttl: 1209600,\n      mongoOptions: [Object],\n      autoRemove: 'native',\n      autoRemoveInterval: 10,\n      touchAfter: 0,\n      stringify: true,\n      crypto: [Object],\n      mongoUrl: 'mongodb+srv://ernesto:erne@cluster0.mf9ug.mongodb.net/ecommerce?retryWrites=true&w=majority'\n    },\n    collectionP: Promise { [Collection] },\n    generate: [Function (anonymous)],\n    [Symbol(kCapture)]: false\n  },\n  sessionID: '3rARMY8ZtwbDomSoLZZtqYyhMyrfvSau',\n  session: Session {\n    cookie: {\n      path: '/',\n      _expires: 2021-12-08T21:42:47.252Z,\n      originalMaxAge: 60000,\n      httpOnly: true\n    }\n  },\n  secret: undefined,\n  cookies: [Object: null prototype] {},\n  signedCookies: [Object: null prototype] {},\n  logIn: [Function (anonymous)],\n  login: [Function (anonymous)],\n  logOut: [Function (anonymous)],\n  logout: [Function (anonymous)],\n  isAuthenticated: [Function (anonymous)],\n  isUnauthenticated: [Function (anonymous)],\n  _passport: {\n    instance: Authenticator {\n      _key: 'passport',\n      _strategies: [Object],\n      _serializers: [Array],\n      _deserializers: [Array],\n      _infoTransformers: [],\n      _framework: [Object],\n      _sm: [SessionManager],\n      Authenticator: [Function: Authenticator],\n      Passport: [Function: Authenticator],\n      Strategy: [Function],\n      strategies: [Object]\n    }\n  },\n  body: {\n    query: 'mutation {\\n' +\n      '  saveProduct(name:\"pera\", description:\"es una fruta\", stock: 20, price: 200) {\\n' +\n      '    name,\\n' +\n      '    description,\\n' +\n      '    stock,\\n' +\n      '    price\\n' +\n      '  }\\n' +\n      '}',\n    variables: null\n  },\n  _body: true,\n  length: undefined,\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    host: 'localhost:8080',\n    connection: 'keep-alive',\n    'content-length': '184',\n    accept: 'application/json',\n    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36',\n    'content-type': 'application/json',\n    'sec-gpc': '1',\n    origin: 'http://localhost:8080',\n    'sec-fetch-site': 'same-origin',\n    'sec-fetch-mode': 'cors',\n    'sec-fetch-dest': 'empty',\n    referer: 'http://localhost:8080/',\n    'accept-encoding': 'gzip, deflate, br',\n    'accept-language': 'es-ES,es;q=0.9'\n  },\n  [Symbol(kHeadersCount)]: 28,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}\" (type IncomingMessage) at path \"description\", stock: Cast to Number failed for value \"{\n  fieldName: 'saveProduct',\n  fieldNodes: [\n    {\n      kind: 'Field',\n      alias: undefined,\n      name: [Object],\n      arguments: [Array],\n      directives: [],\n      selectionSet: [Object],\n      loc: [Location]\n    }\n  ],\n  returnType: GraphQLObjectType {\n    name: 'Product',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      name: [Object],\n      description: [Object],\n      stock: [Object],\n      price: [Object]\n    },\n    _interfaces: []\n  },\n  parentType: GraphQLObjectType {\n    name: 'Mutation',\n    description: undefined,\n    isTypeOf: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: {\n      kind: 'ObjectTypeDefinition',\n      description: undefined,\n      name: [Object],\n      interfaces: [],\n      directives: [],\n      fields: [Array],\n      loc: [Location]\n    },\n    extensionASTNodes: [],\n    _fields: [Object: null prototype] {\n      updateProduct: [Object],\n      deleteProduct: [Object],\n      saveProduct: [Object]\n    },\n    _interfaces: []\n  },\n  path: { prev: undefined, key: 'saveProduct', typename: 'Mutation' },\n  schema: GraphQLSchema {\n    __validationErrors: [],\n    description: undefined,\n    extensions: [Object: null prototype] {},\n    astNode: undefined,\n    extensionASTNodes: [],\n    _queryType: GraphQLObjectType {\n      name: 'Query',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _mutationType: GraphQLObjectType {\n      name: 'Mutation',\n      description: undefined,\n      isTypeOf: undefined,\n      extensions: [Object: null prototype] {},\n      astNode: [Object],\n      extensionASTNodes: [],\n      _fields: [Object: null prototype],\n      _interfaces: []\n    },\n    _subscriptionType: undefined,\n    _directives: [\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective],\n      [GraphQLDirective]\n    ],\n    _typeMap: [Object: null prototype] {\n      Query: [GraphQLObjectType],\n      String: [GraphQLScalarType],\n      Mutation: [GraphQLObjectType],\n      Int: [GraphQLScalarType],\n      Product: [GraphQLObjectType],\n      Boolean: [GraphQLScalarType],\n      __Schema: [GraphQLObjectType],\n      __Type: [GraphQLObjectType],\n      __TypeKind: [GraphQLEnumType],\n      __Field: [GraphQLObjectType],\n      __InputValue: [GraphQLObjectType],\n      __EnumValue: [GraphQLObjectType],\n      __Directive: [GraphQLObjectType],\n      __DirectiveLocation: [GraphQLEnumType]\n    },\n    _subTypeMap: [Object: null prototype] {},\n    _implementationsMap: [Object: null prototype] {}\n  },\n  fragments: [Object: null prototype] {},\n  rootValue: {\n    product: [Function: getProduct],\n    products: [Function: getProducts],\n    updateProduct: [Function: updateProduct],\n    deleteProduct: [Function: deleteProduct],\n    saveProduct: [Function: saveProduct]\n  },\n  operation: {\n    kind: 'OperationDefinition',\n    operation: 'mutation',\n    name: undefined,\n    variableDefinitions: [],\n    directives: [],\n    selectionSet: { kind: 'SelectionSet', selections: [Array], loc: [Location] },\n    loc: Location {\n      start: 0,\n      end: 144,\n      startToken: [Token],\n      endToken: [Token],\n      source: [Source]\n    }\n  },\n  variableValues: {}\n}\" (type Object) at path \"stock\", price: Path `price` is required."}
{"level":"error"}
{"level":"error","message":"[Failed getting item form database] | CastError: Cast to ObjectId failed for value \"{ id: '61b128222c52ce8b9b9a18dc' }\" (type Object) at path \"_id\" for model \"Product\""}
